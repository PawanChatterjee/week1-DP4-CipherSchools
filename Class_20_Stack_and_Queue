//Class_20_Stack_and_Queue
//Check for Balanced Brackets in an expression (well-formedness) using Stack
import java.util.*;
 
public class BalancedBrackets {
    static boolean areBracketsBalanced(String expr)
    {
        Deque<Character> stack
            = new ArrayDeque<Character>();
 
   
        for (int i = 0; i < expr.length(); i++) {
            char x = expr.charAt(i);
 
            if (x == '(' || x == '[' || x == '{') {
            
                stack.push(x);
                continue;
            }
 
            
            if (stack.isEmpty())
                return false;
            char check;
            switch (x) {
            case ')':
                check = stack.pop();
                if (check == '{' || check == '[')
                    return false;
                break;
 
            case '}':
                check = stack.pop();
                if (check == '(' || check == '[')
                    return false;
                break;
 
            case ']':
                check = stack.pop();
                if (check == '(' || check == '{')
                    return false;
                break;
            }
        }
 
       
        return (stack.isEmpty());
    }
    public static void main(String[] args)
    {
        String expr = "([{}])";
 
        if (areBracketsBalanced(expr))
            System.out.println("Balanced ");
        else
            System.out.println("Not Balanced ");
    }
}
<---------------------------------------------------------------------------------------->
//Merge Overlapping Intervals
import java.util.Arrays;
import java.util.Comparator;
public class Interval
{
    int start,end;
     
    Interval(int start, int end)
    {
        this.start=start;
        this.end=end;
    }
}
 
public class MergeOverlappingIntervals {
    
    public static void mergeIntervals(Interval arr[])
    {
       
        Arrays.sort(arr,new Comparator<Interval>(){
            public int compare(Interval i1,Interval i2)
            {
                return i1.start - i2.start;
            }
        });
   
        int index = 0; // Stores index of last element
      
   

        for (int i=1; i<arr.length; i++)
        {
    
            if (arr[index].end >=  arr[i].start)
            {
             
                arr[index].end = Math.max(arr[index].end, arr[i].end);
            }
            else {
                index++;
                arr[index] = arr[i];
            }   
        }
  
        System.out.print("The Merged Intervals are: ");
        for (int i = 0; i <= index; i++)
        {
            System.out.print("[" + arr[i].start + ","
                                        + arr[i].end + "]");
        }
    }
    public static void main(String args[]) {
        Interval arr[]=new Interval[4];
        arr[0]=new Interval(6,8);
        arr[1]=new Interval(1,9);
        arr[2]=new Interval(2,4);
        arr[3]=new Interval(4,7);
        mergeIntervals(arr);
    }
}
<---------------------------------------------------------------------------------------------->
