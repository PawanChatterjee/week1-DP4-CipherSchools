//Class_12_Backtracking
//Question - Check if given Sudoku Board is Valid or Not.
import java.io.*;
import java.util.*;
 
class GFG {
    public static boolean notInRow(char arr[][], int row)
    {
 
 
        HashSet<Character> st = new HashSet<>();
 
        for (int i = 0; i < 9; i++) {
 
            
            if (st.contains(arr[row][i]))
                return false;

            if (arr[row][i] != '.')
                st.add(arr[row][i]);
        }
        return true;
    }
    public static boolean notInCol(char arr[][], int col)
    {
        HashSet<Character> st = new HashSet<>();
 
        for (int i = 0; i < 9; i++) {
 
            if (st.contains(arr[i][col]))
                return false;
 
            if (arr[i][col] != '.')
                st.add(arr[i][col]);
        }
        return true;
    }
    public static boolean
    notInBox(char arr[][], int startRow, int startCol)
    {
        HashSet<Character> st = new HashSet<>();
 
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                char curr
                    = arr[row + startRow][col + startCol];
 
               
                if (st.contains(curr))
                    return false;
                    
                if (curr != '.')
                    st.add(curr);
            }
        }
        return true;
    }
    public static boolean isValid(char arr[][], int row,
                                  int col)
    {
        return notInRow(arr, row) && notInCol(arr, col)
            && notInBox(arr, row - row % 3, col - col % 3);
    }
 
    public static boolean isValidConfig(char arr[][], int n)
    {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!isValid(arr, i, j))
                    return false;
            }
        }
        return true;
    }
    public static void main(String[] args)
    {
        char[][] board = new char[][] {
            { '5', '3', '.', '.', '7', '.', '.', '.', '.' },
            { '6', '.', '.', '1', '9', '5', '.', '.', '.' },
            { '.', '9', '8', '.', '.', '.', '.', '6', '.' },
            { '8', '.', '.', '.', '6', '.', '.', '.', '3' },
            { '4', '.', '.', '8', '.', '3', '.', '.', '1' },
            { '7', '.', '.', '.', '2', '.', '.', '.', '6' },
            { '.', '6', '.', '.', '.', '.', '2', '8', '.' },
            { '.', '.', '.', '4', '1', '9', '.', '.', '5' },
            { '.', '.', '.', '.', '8', '.', '.', '7', '9' }
        };
        System.out.println(
            (isValidConfig(board, 9) ? "YES" : "NO"));
    }
}
<---------------------------------------------------------------------------------------->
//Question - The Knight's Tour Problem
import java.util.*;
public class KnightTour {
    static int N = 8;
  
   
    static boolean isSafe(int x, int y, int sol[][])
    {
        return (x >= 0 && x < N && y >= 0 && y < N
                && sol[x][y] == -1);
    }
  
    
    static void printSolution(int sol[][])
    {
        for (int x = 0; x < N; x++) {
            for (int y = 0; y < N; y++)
                System.out.print(sol[x][y] + " ");
            System.out.println();
        }
    }
  

    static boolean solveKT()
    {
        int sol[][] = new int[8][8];
  
    
        for (int x = 0; x < N; x++)
            for (int y = 0; y < N; y++)
                sol[x][y] = -1;
  
        
        int xMove[] = { 2, 1, -1, -2, -2, -1, 1, 2 };
        int yMove[] = { 1, 2, 2, 1, -1, -2, -2, -1 };
  
       
        sol[0][0] = 0;
  
      
        if (!solveKTUtil(0, 0, 1, sol, xMove, yMove)) {
            System.out.println("Solution does not exist");
            return false;
        }
        else
            printSolution(sol);
  
        return true;
    }
  
   
    static boolean solveKTUtil(int x, int y, int movei,
                               int sol[][], int xMove[],
                               int yMove[])
    {
        int k, next_x, next_y;
        if (movei == N * N)
            return true;
  
        
        for (k = 0; k < 8; k++) {
            next_x = x + xMove[k];
            next_y = y + yMove[k];
            if (isSafe(next_x, next_y, sol)) {
                sol[next_x][next_y] = movei;
                if (solveKTUtil(next_x, next_y, movei + 1,
                                sol, xMove, yMove))
                    return true;
                else
                    sol[next_x][next_y]
                        = -1; 
            }
        }
  
        return false;
    }
  

    public static void main(String args[])
    {
        solveKT();
    }
}
<---------------------------------------------------------------------------------------------->
