//Class_14_Linked_List_4.2
//Merge Two Sorted Linked Lists
import java.util.*;
 
class GFG {
    static class Node {
        int key;
        Node next;
    };
 
   
    static Node reverseList(Node head)
    {
 
        if (head.next == null)
            return head;
 
        Node rest = reverseList(head.next);
        head.next.next = head;
        head.next = null;
 
        return rest;
    }
 

    static Node sortedMerge(Node a, Node b)
    {
 
  
        a = reverseList(a);
 
      
        b = reverseList(b);
 
     
        Node head = null;
 
        Node temp;
 
       
        while (a != null && b != null) {
 
           
            if (a.key >= b.key) {
 
        
                temp = a.next;
 
                a.next = head;
 
                head = a;
 
            
                a = temp;
            }
 
   
            else {
 
                temp = b.next;
                b.next = head;
                head = b;
                b = temp;
            }
        }
 
      
        while (a != null) {
 
            temp = a.next;
            a.next = head;
            head = a;
            a = temp;
        }
 
    
        while (b != null) {
 
            temp = b.next;
            b.next = head;
            head = b;
            b = temp;
        }
 
      
        return head;
    }
    static void printList(Node Node)
    {
        while (Node != null) {
            System.out.print(Node.key + " ");
            Node = Node.next;
        }
    }
 

    static Node newNode(int key)
    {
        Node temp = new Node();
        temp.key = key;
        temp.next = null;
        return temp;
    }
 
   
    public static void main(String[] args)
    {
      
        Node res = null;
 
        Node a = newNode(5);
        a.next = newNode(10);
        a.next.next = newNode(15);
        a.next.next.next = newNode(40);
 
        Node b = newNode(2);
        b.next = newNode(3);
        b.next.next = newNode(20);
 
   
        res = sortedMerge(a, b);
 
        System.out.println("Merged Linked List is:");
        printList(res);
    }
}
<------------------------------------------------------------------------------------->
//Question - Add Two Numbers Represented By Linked Lists
import java.util.*;
public class LinkedList {
 
    static Node head1, head2;
 
    static class Node {
 
        int data;
        Node next;
 
        Node(int d) {
            data = d;
            next = null;
        }
    }
 
   
    void addTwoLists(Node first, Node second) {
        Node start1 = new Node(0);
        start1.next = first;
        Node start2 = new Node(0);
        start2.next = second;
 
        addPrecedingZeros(start1, start2);
        Node result = new Node(0);
        if (sumTwoNodes(start1.next, start2.next, result) == 1) {
            Node node = new Node(1);
            node.next = result.next;
            result.next = node;
        }
        printList(result.next);
    }
 
    
    private int sumTwoNodes(Node first, Node second, Node result) {
        if (first == null) {
            return 0;
        }
        int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
        Node node = new Node(number % 10);
        node.next = result.next;
        result.next = node;
        return number / 10;
    }
 
   
    private void addPrecedingZeros(Node start1, Node start2) {
        Node next1 = start1.next;
        Node next2 = start2.next;
        while (next1 != null && next2 != null) {
            next1 = next1.next;
            next2 = next2.next;
        }
        if (next1 == null && next2 != null) {
            while (next2 != null) {
                Node node = new Node(0);
                node.next = start1.next;
                start1.next = node;
                next2 = next2.next;
            }
        } else if (next2 == null && next1 != null) {
            while (next1 != null) {
                Node node = new Node(0);
                node.next = start2.next;
                start2.next = node;
                next1 = next1.next;
            }
        }
    }
 
    
    void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println("");
    }
 
 
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
 
       
        list.head1 = new Node(7);
        list.head1.next = new Node(5);
        list.head1.next.next = new Node(9);
        list.head1.next.next.next = new Node(4);
        list.head1.next.next.next.next = new Node(6);
        System.out.print("First list is ");
        list.printList(head1);
        list.head2 = new Node(8);
        list.head2.next = new Node(4);
        System.out.print("Second list is ");
        list.printList(head2);
 
        System.out.print("Resultant list is ");
        list.addTwoLists(head1, head2);
    }
}
<--------------------------------------------------------------------------------->
